// See https://aka.ms/new-console-template for more information
//Savanna Dickie
// 11/05/2024
// Lab 8: Project Euler
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;

Console.Clear();
Console.WriteLine("\nThis is a program that will demostrate the solution to two Project Euler problems");
Console.WriteLine("\n=== Projet Euler Menu ===\n\n1. Even Fibonacci Numbers\n2. Smallest Multiple\n3. Sum Square Difference\n4. Summation of Primes");
Console.Write("\nEnter the number of your selection ");
int selection = int.Parse(Console.ReadLine());
switch (selection)
{
    case 1: 
        EvenFibonacciNumbers(1,2); 
        Console.WriteLine($"The sum of Even Fibonacci Numbers: {EvenFibonacciNumbers(1,2)}");
        break;
    case 2: 
        SmallestMultiple(20); 
        Console.WriteLine($"The smallest number divisible by all numbers from 1 to 20 is {SmallestMultiple(20)}"); 
        //Console.WriteLine($"LCM({n}, {leastCommonMultiple}) = {SmallestMultiple(20)}")
        break;
    case 3:
        SumSquareDifference(100);
        Console.WriteLine($"The sum of the squares of the first ten natural numbers is: {(10 * (10 + 1) * (2*10+1)) /6}");
        Console.WriteLine($"\nThe sqaure of the sum of the first ten natural numbers is: {((10 * (10 + 1)) / 2) * ((10* (10+1))/2)}");
        Console.WriteLine($"\nHence the difference between the sum of the squares of the \nfirst ten natural numbers and the square of the sum is: {SumSquareDifference(10)}");
        Console.WriteLine($"\nThe difference between the sum of the squares of the first \none hundred natural numbers and the square of the sum is: {SumSquareDifference(100)}\n");
        break;
    case 4: 
        SumOfPrimes(2000000);
        Console.WriteLine(SumOfPrimes(2000000));
        break;
    
}

static int EvenFibonacciNumbers(int x, int y) 
{
   
    if (y > 4000000) return 0; 
    
    int sum = (y % 2 == 0) ? y : 0; 
    return sum + EvenFibonacciNumbers(y, x + y); 
}

static long SmallestMultiple(long n)
{
    long GreatestCommonDivisor(long x, long y) => y == 0 ? x : GreatestCommonDivisor(y, x % y);
    if (n == 1)
    return 1;

    long leastCommonMultiple = SmallestMultiple(n-1);
    
    long result = (n * leastCommonMultiple) / GreatestCommonDivisor(n, leastCommonMultiple);
    
     //Console.WriteLine($"LeastCommonMultiple({n}, {leastCommonMultiple}) = {result}");
     return result;
     
}

// SUM SQUARE DIFFERENCE
static int SumSquareDifference(int n)
{
    int sumOfSquares = (n * (n + 1) * (2 * n + 1)) / 6;
    int sum = (n * ( n + 1)) / 2;
    int squareOfSum = sum * sum;
    return squareOfSum - sumOfSquares;
}
//INTERATIVE SUM OF PRIMES
static long SumOfPrimes(long n)
{
    long sum = 0;
    for (long number = 2; number < n; number++)
    {
        bool checkingForPrime = true;
        for(long i = 2; i * i <= number; i ++) //(n <= 2) return 0;
        {
            if (number % i == 0)
            {
                checkingForPrime = false;
                break; 
            }
        }
        if (checkingForPrime)
        {
            sum += number;
        }
    }
    return sum;
    
}

// Summation of primes - THIS WORKS FOR 10 but not 2000000
/*static long SumOfPrimes(long n)
{
    //if (n > 10) return 1; 
    //int sum = (n % n == 1) ? n : 1;
    //return n++;
    if (n <= 2) return 0;
    bool checkingForPrime = true;
    for (long i = 2; i * i <= n - 1; i++)
    {
        if ((n - 1) % i == 0) //return false 
        {
            checkingForPrime = false;
            break;
        }

    }
    if (checkingForPrime) return (n - 1) + SumOfPrimes(n - 1);
    else return SumOfPrimes (n - 1);
} */


//FIBONACCI SEQUENCE FROM HOMEWORK

/*static int FibonacciSequence(int n)
{
   
    if (n == 0) return 0;
    if (n == 1) return 1;
    return FibonacciSequence(n -1) + FibonacciSequence(n-2);
}
int n = 10;
int fibonacci = FibonacciSequence(n);
Console.WriteLine(fibonacci); */


//EDITING BASE AND SUM TO GET EVEN FIBONACCISEQUENCE
//Each new term ijn the Fibonacci sequence is generated by adding the previous two terms
//By staring with 1 and 2, the first 10 terms will be: 
// 1,2,3,5,8,13,21,34,55,89
//By considering the terms in the Fibonacci Sequence whole values do not 
//exceed four milling, find the sum of the even valued terms.
//int sum = EvenFibonacciNumbers(1, 2); // calling my method

/*static int EvenFibonacciNumbers(int x, int y) // making my method
{
   
    if (y > 4000000) return 0; //BASE CASE two is not greater and will keep adding until it reachins 4000000
    
    int sum = (y % 2 == 0) ? y : 0; //checking two is even by dividing by 2 if it is no divisable by two its not counted.
    //return EvenFibonacciNumbers(n -1) + EvenFibonacciNumbers(n-2);
    return sum + EvenFibonacciNumbers(y, x + y); //adding two to the fibonacci numbers so its even until 4000000
}
//int n = 10;
int fibonacci = EvenFibonacciNumbers(1,2);
Console.WriteLine(fibonacci); */

//SMALLEST MULTIPLE
/*
static int SmallestMultiple(int n)
{
    int GreatestCommonDivisor(int x, int y) => y == 0 ? x : GreatestCommonDivisor(y, x % y);
    if (n == 1)
    return 1;

    int LeastCommonMultiple = SmallestMultiple(n-1);
    //return ((n * LeastCommonMultiple) / GreatestCommonDivider(n, LeastCommonMultiple));
    //Console.WriteLine($"LCM({n}, {LeastCommonMultiple}) = {SmallestMultiple(20)}");
    int result = (n * LeastCommonMultiple) / GreatestCommonDivisor(n, LeastCommonMultiple);
    //return (n * LeastCommonMultiple) / GreatestCommonDivisor(n, LeastCommonMultiple);
     Console.WriteLine($"LeastCommonMultiple({n}, {LeastCommonMultiple}) = {result}");
     return result;
}
Console.WriteLine($"The smallest number divisible by all numbers from 1 to 20 is {SmallestMultiple(20)}"); */
//debug
 //Console.WriteLine($"LCM({n}, {LeastCommonMultiple}) = {SmallestMultiple(20)}");
 //debug 
 /*
 LeastCommonMultiple(2, 1) = 2 good
LeastCommonMultiple(3, 2) = 6 good
LeastCommonMultiple(4, 6) = 12 good
LeastCommonMultiple(5, 12) = 60 good
LeastCommonMultiple(6, 60) = 60 good
LeastCommonMultiple(7, 60) = 420 good
LeastCommonMultiple(8, 420) = 840 good
LeastCommonMultiple(9, 840) = 2520 good
LeastCommonMultiple(10, 2520) = 2520 good
LeastCommonMultiple(11, 2520) = 27720 good
LeastCommonMultiple(12, 27720) = 27720 good
LeastCommonMultiple(13, 27720) = 360360 good
LeastCommonMultiple(14, 360360) = 360360 good
LeastCommonMultiple(15, 360360) = 360360 good
LeastCommonMultiple(16, 360360) = 720720 good
LeastCommonMultiple(17, 720720) = 12252240 good
LeastCommonMultiple(18, 12252240) = 12252240 good
LeastCommonMultiple(19, 12252240) = 232792560 good
LeastCommonMultiple(20, 232792560) = 18044195 */ //not good

//AFTER DEBUG CHANGING TO LONG INSTEAD OF INT
/*
LeastCommonMultiple(2, 1) = 2
LeastCommonMultiple(3, 2) = 6
LeastCommonMultiple(4, 6) = 12
LeastCommonMultiple(5, 12) = 60
LeastCommonMultiple(6, 60) = 60
LeastCommonMultiple(7, 60) = 420
LeastCommonMultiple(8, 420) = 840
LeastCommonMultiple(9, 840) = 2520
LeastCommonMultiple(10, 2520) = 2520
LeastCommonMultiple(11, 2520) = 27720
LeastCommonMultiple(12, 27720) = 27720
LeastCommonMultiple(13, 27720) = 360360
LeastCommonMultiple(14, 360360) = 360360
LeastCommonMultiple(15, 360360) = 360360
LeastCommonMultiple(16, 360360) = 720720
LeastCommonMultiple(17, 720720) = 12252240
LeastCommonMultiple(18, 12252240) = 12252240
LeastCommonMultiple(19, 12252240) = 232792560
LeastCommonMultiple(20, 232792560) = 232792560 */